<% 
// Verificamos si el producto existe
if (producto) { 
%>
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="initial-scale=1, width=device-width" />

    <link rel="stylesheet" href="/global.css" />
    <link rel="stylesheet" href="/producto.css" />
    <script src="/global.js" defer></script>
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Josefin Sans:wght@400;600;700&display=swap"
    />
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,300;0,400;0,500;0,600;0,700;1,600&display=swap"
    />
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Literata:wght@400&display=swap"
    />
    
    <!-- Barra y Footer (van antes de tu propio JS) -->
    <link rel="stylesheet" href="/barra.css" />
    <link rel="stylesheet" href="/footer.css" />
    <script src="/barra.js" defer></script> <!-- toggleMenu, hideSidebar -->
    <script src="/global.js" defer></script>


  </head>

  <body>
    <div id="barra"></div>
    <div class="canvas">
      <img class="background-icon" alt="" src="/public/background@2x.png" />

      <div class="fondobajo"></div>
    
      <div class="divisor3"></div>
      <div class="historial">
        <div class="historial-de-precios">Historial de precios</div>
        <div id="price-chart-container" style="display: flex; justify-content: center;">
            <div id="price-chart"></div>
        </div>
    </div>
      <div class="descripcion">
        <div class="description1">Descripción</div>
        
        <div class="desc"><%- descripcion2 %></div>

        
        <div class="review">Opiniones</div>
    </div>

      <div class="related-products">
          <% productosRelacionados.forEach((relatedProduct, index) => { %>
              <div class="sqr-related-product-<%= index + 1 %>">
                  <a href="/producto?id=<%= relatedProduct.producto_id %>" class="related-product-link">
                    <img src="<%= CFI %>/Products/<%= relatedProduct.producto_id %>/a.webp" alt="Producto <%= index + 1 %>" class="related-product-img">

                  </a>
                  <div class="related-product-name"><%= relatedProduct.nombre %></div>
                  <div class="related-product-price">$ <%= relatedProduct.precio %></div>
              </div>
          <% }) %>
          <div class="related-products-tittle">Productos Relacionados</div>
      </div>
    
  
   
      <div class="info">
        <img
          id="mainImage"
          class="imagenprincipal-icon"
          alt=""
          src=""
          data-animate-on-scroll
        />

        <div class="adderContainer"> 
          <div class="addcart">
            <div class="add-to-cart" id="addToCartButton" data-product-id="<%= producto.producto_id %>">
              + añadir al carrito
            </div>
          </div>
        </div>
          
        

        <div class="imagenes" id="imagenes-container">
          <div class="a">
            <img id="imagen-a" alt="Imagen A" src="" onclick="changeMainImage('a.webp')">
          </div>
          <div class="b">
            <img id="imagen-b" alt="Imagen B" src="" onclick="changeMainImage('b.webp')">
          </div>
          <div class="c">
            <img id="imagen-c" alt="Imagen C" src="" onclick="changeMainImage('c.webp')">
          </div>
          <div class="d">
            <img id="imagen-d" alt="Imagen D" src="" onclick="changeMainImage('d.webp')">
          </div>
        </div>
   
      
        <div class="producto-info">
          <div class="nombreproducto"><%= producto.nombre.toUpperCase() %></div>
          <div class="precio">$ <%= new Intl.NumberFormat('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(producto.precio) %></div>


        </div>
        <div class="descripcionbasica">
            <%= descripcion1 %> <!-- Mostramos la Descripción 1 aquí -->
        </div>

        
        <!-- Paleta de colores -->
        <div class="color-palette">
          <div class="color-grid" id="color-grid"></div>
        </div>
        


        <div class="caracteristicas">
            <p class="material-tela">
              <b>Color: </b>
              <span id="color-name" class="tela"><%= color %></span> 
            </p>
            
            <p class="material-tela">
                <b>Material:</b>
                <span class="tela"> <%= material %></span> <!-- Material desde info.txt -->
            </p>
            <p class="material-tela">
                <b class="tela">Dimensiones: </b>
                <span><%= dimensiones %></span> <!-- Dimensiones desde info.txt -->
            </p>
            <p class="material-tela">
                <b>Acabado: </b>
                <span class="tela"><%= acabado %></span> <!-- Acabado desde info.txt -->
            </p>
            
            <div id="availability-container">
              <p id="availability-status">Cargando disponibilidad...</p>
          </div>
            
            
            
        </div>


      </div>
      
    </div>

    <!-- Footer -->
    <div id="footer" class="footer"></div>



    <!-- scripts -->

    <script src="https://unpkg.com/lightweight-charts/dist/lightweight-charts.standalone.production.js"></script>
    
    

    <script>
      window.onload = () => loadTemplates('catalogo');
      let currentImagePath = "<%= CFI %>/Products/<%= producto.producto_id %>";


          document.addEventListener('DOMContentLoaded', () => {
            const params = new URLSearchParams(window.location.search);
            const productoId = params.get('id');
            const colorGrid = document.getElementById('color-grid');
            const colorNameElement = document.getElementById('color-name');
            const mainImage = document.getElementById('mainImage');
            const availabilityStatus = document.getElementById('availability-status');
            const imageIds = ['imagen-a', 'imagen-b', 'imagen-c', 'imagen-d'];

            if (!productoId) {
              console.error('No se proporcionó un ID de producto.');
              return;
            }

            // Cargar colores y disponibilidad desde el backend
            fetch(`/colores?id=${productoId}`)
              .then((response) => response.json())
              .then((data) => {
                if (!data.success || !data.colores || !Array.isArray(data.colores)) {
                  console.error('La respuesta del servidor no tiene el formato esperado.');
                  return;
                }

                const colores = data.colores;

                // Crear la paleta de colores
                colorGrid.innerHTML = ''; // Limpia el grid
                colores.forEach((color) => {
                  const colorBox = document.createElement('div');
                  colorBox.className = 'color-box';
                  colorBox.style.backgroundColor = color.color_hex;

                  // Evento para cambiar imágenes, texto del color y disponibilidad
                  colorBox.onclick = () => {
                    const rutaImagenes = color.ruta_imagenes;
    
                    // Actualizar la variable global
                    currentImagePath = rutaImagenes;
                    
                    // Actualizar las imágenes principales y miniaturas
                    mainImage.src = `${rutaImagenes}/a.webp`;
                    imageIds.forEach((id, index) => {
                      document.getElementById(id).src = `${rutaImagenes}/${String.fromCharCode(97 + index)}.webp`;
                    });
                    
                    // Actualizar el texto del color
                    colorNameElement.textContent = color.color;
                    
                    // Actualizar la disponibilidad
                    if (color.disponible > 0) {
                      availabilityStatus.textContent = 'Disponible para envío inmediato';
                      availabilityStatus.className = 'disponible';
                    } else {
                      availabilityStatus.textContent = 'Entrega en 10-14 días';
                      availabilityStatus.className = 'no-disponible';
                    }
                    
                    // Guardar el color seleccionado en Local Storage
                    localStorage.setItem('colorSeleccionado', JSON.stringify({
                      color_id: color.color_id,
                      color_nombre: color.color,
                      producto_id: productoId,
                    }));
                  };

                  colorGrid.appendChild(colorBox);
                });

                // Simular un clic en el color principal para cargarlo por defecto
                if (colores.length > 0) {
                  colorGrid.firstChild.click();
                }
              })
              .catch((error) => console.error('Error al cargar los colores:', error));
          });




          function changeMainImage(imageName) {
              document.getElementById('mainImage').src = currentImagePath + '/' + imageName;
            }

          

      var scrollAnimElements = document.querySelectorAll("[data-animate-on-scroll]");
      var observer = new IntersectionObserver(
        (entries) => {
          for (const entry of entries) {
            if (entry.isIntersecting || entry.intersectionRatio > 0) {
              const targetElement = entry.target;
              targetElement.classList.add("animate");
              observer.unobserve(targetElement);
            }
          }
        },
        {
          threshold: 0.15,
        }
      );
      
      for (let i = 0; i < scrollAnimElements.length; i++) {
        observer.observe(scrollAnimElements[i]);
      }

    
      function interpolateData(data) {
        const interpolated = [];
      
        for (let i = 0; i < data.length - 1; i++) {
          const current = data[i];
          const next = data[i + 1];
      
          // Agregar el punto actual
          interpolated.push(current);
      
          const currentDate = new Date(current.time);
          const nextDate = new Date(next.time);
      
          const diffDays = Math.floor((nextDate - currentDate) / (1000 * 60 * 60 * 24));
      
          if (diffDays > 1) {
            // Interpolar valores entre los días
            const priceStep = (next.value - current.value) / diffDays;
      
            for (let j = 1; j < diffDays; j++) {
              const interpolatedDate = new Date(currentDate);
              interpolatedDate.setDate(currentDate.getDate() + j);
      
              interpolated.push({
                time: interpolatedDate.toISOString().split('T')[0],
                value: current.value + priceStep * j
              });
            }
          }
        }
      
        // Agregar el último punto
        interpolated.push(data[data.length - 1]);
        return interpolated;
      }
      
      
      document.addEventListener('DOMContentLoaded', function () {
        // ① Definir container antes de usarla
        const container = document.getElementById('price-chart-container');
      
        // ② Ahora sí podemos usar container.clientWidth dentro
        function getChartOptions() {
          const vw = window.innerWidth;
          const w  = container.clientWidth;
          let h, fs;
      
          if (vw < 768) {         // móvil
            h  = 250;
            fs = 12;
          } else if (vw <= 1024) { // tablet
            h  = 400;
            fs = 20;
          } else {                // desktop
            h  = 500;
            fs = 20;
          }
      
          return { width: w, height: h, fontSize: fs };
        }
      
        // ③ Obtenemos opciones y creamos el chart
        let opts = getChartOptions();
        const chart = LightweightCharts.createChart(container, {
          width:   opts.width,
          height: opts.height,
          layout: {
            backgroundColor: '#eeeeee',
            textColor:       '#333',
            fontSize:        opts.fontSize
          },
          grid: {
            vertLines: { color: '#eeeeee' },
            horzLines: { color: '#eeeeee' }
          },
          priceScale: {
            borderColor: '#cccccc',
            autoScale:   true,
            scaleMargins: { top: 0.2, bottom: 0.2 }
          },
          timeScale: {
            borderColor:    '#cccccc',
            timeVisible:    true,
            secondsVisible: true
          },
        });
        const lineSeries = chart.addLineSeries({ color: '#a5d1ce', lineWidth: 6 });
      
        // ④ Setear los datos (tu lógica existente)
        let chartData = <%- JSON.stringify(chartData) %>;
        try {
          if (Array.isArray(chartData) && chartData.length) {
            chartData = chartData.map(d => ({ time: d.time, value: parseFloat(d.value) }));
            chartData = interpolateData(chartData);
            lineSeries.setData(chartData);
            chart.timeScale().fitContent();
          }
        } catch (e) {
          console.error(e);
        }
      
        // ⑤ Volver responsive al resize
        window.addEventListener('resize', () => {
          opts = getChartOptions();
          chart.applyOptions({
            width:  opts.width,
            height: opts.height,
            layout: { fontSize: opts.fontSize }
          });
          chart.timeScale().fitContent();
        });
      });
      





        // agregar al carrito
        document.addEventListener('DOMContentLoaded', () => {
          // Seleccionar el botón
          const addToCartButton = document.getElementById('addToCartButton');
          const addCartContainer = document.querySelector('.addcart');
      
          addCartContainer.addEventListener('click', async () => {
              if (!addToCartButton) return;
      
              const originalText = addToCartButton.textContent; // Guardar el texto original
              const originalBackground = addToCartButton.style.backgroundColor; // Guardar color original
      
              // Cambiar estilos mientras se añade al carrito
              addToCartButton.textContent = "Añadiendo...";
              addCartContainer.style.backgroundColor = "#A67B5B"; // Azul chukum menos saturado
              addToCartButton.style.cursor = "not-allowed"; // Evitar más clics
              addToCartButton.disabled = true;
      
              const productId = addToCartButton.dataset.productId;
      
              if (!productId) {
                  alert('Producto no válido');
                  resetButton();
                  return;
              }
      
              // Recuperar el color seleccionado desde Local Storage
              const colorSeleccionado = JSON.parse(localStorage.getItem('colorSeleccionado'));
      
              // Imprimir la información que se enviará al backend
              console.log('Datos enviados al backend:', {
                  product_id: productId,
                  color_name: colorSeleccionado?.color_nombre || null,
              });
      
              try {
                  // Realizar la solicitud POST al backend con el nombre del color
                  const response = await fetch(`/addToCart/${productId}`, {
                      method: 'POST',
                      headers: { 'Content-Type': 'application/json' },
                      body: JSON.stringify({
                          color_name: colorSeleccionado?.color_nombre || null,
                      }),
                  });
      
                  const result = await response.json();
      
                  if (response.ok) {
                      mostrarNotificacion('Producto añadido al carrito correctamente', 'success');
                  } else {
                      mostrarNotificacion(result.error || 'Ocurrió un error al añadir al carrito', 'error');
                  }
              } catch (error) {
                  console.error('Error al añadir al carrito:', error);
                  mostrarNotificacion('Error al procesar la solicitud', 'error');
              } finally {
                  // Restaurar el botón después de 1 segundo
                  setTimeout(resetButton, 1000);
              }
          });
      
          // Función para restaurar el botón
          function resetButton() {
              addToCartButton.textContent = "+ añadir al carrito";
              addCartContainer.style.backgroundColor = ""; // Volver al color original
              addToCartButton.style.cursor = "pointer"; // Restaurar cursor
              addToCartButton.disabled = false;
          }
      
          // Función para mostrar una notificación
          function mostrarNotificacion(mensaje, tipo) {
              const notificacion = document.createElement('div');
              notificacion.className = `notificacion ${tipo}`; // Añadir clase para estilos (success o error)
              notificacion.textContent = mensaje;
      
              // Añadir la notificación al cuerpo del documento
              document.body.appendChild(notificacion);
      
              // Eliminar la notificación después de 3 segundos
              setTimeout(() => {
                  notificacion.remove();
              }, 3000);
          }
      });
      
        

 
      
      
    </script>
      

      
  </body>
  <script src="https://unpkg.com/lightweight-charts@4.0.0/dist/lightweight-charts.standalone.production.js"></script>
  <script src="/global.js" defer></script>
</html>
<% 
} else { 
%>
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="initial-scale=1, width=device-width" />
    <link rel="stylesheet" href="/global.css" />
  </head>
  <body>
    <div class="producto-no-encontrado">
      <h1>Producto no encontrado</h1>
      <p>Lo sentimos, el producto que buscas no existe.</p>
    </div>
  </body>
</html>
<% 
} 
%>
