<!DOCTYPE html>
<html lang="es">
<head>
  <title>Perfil</title>
  <meta charset="utf-8" />
  <meta name="viewport" content="initial-scale=1, width=device-width" />

  <link rel="stylesheet" href="./global.css" />
  <link rel="stylesheet" href="./perfil.css" />

  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Josefin+Sans:wght@400;600;700&display=swap" />
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,300;0,400;0,500;0,600&display=swap" />
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Literata:wght@400&display=swap" />
  
    <!-- Barra y Footer (van antes de tu propio JS) -->
    <link rel="stylesheet" href="/barra.css" />
    <link rel="stylesheet" href="/footer.css" />
    <script src="/barra.js" defer></script> <!-- toggleMenu, hideSidebar -->
    <script src="/global.js" defer></script>

  <title>Compras</title>
</head>
<body>
  <div id="barra"></div>

  <div class="container">
    <div class="profile-container">
      <button class = "logout" >Cerrar Sesi√≥n</button>
      
      <!-- Informaci√≥n personal -->
      <section class="personal-info">
        <h2>Informaci√≥n Personal</h2>
        <form id="personal-info-form">
          <label for="name">Nombre:</label>
          <input type="text" id="name" name="name" value="<%= user.nombre %>" required />

          <label for="phone">Tel√©fono:</label>
          <input type="text" id="phone" name="phone" value="<%= user.telefono %>" required class="tel" />
          <button type="submit">Guardar cambios</button>
          
        </form>
      </section>
      
      <!-- Direcciones de env√≠o -->
      <section class="address-section">
        <h2>Direcciones de Env√≠o</h2>
        <ul id="address-list"></ul>
        <button id="open-add-address">Agregar Direcci√≥n</button>
      </section>
      
      <!-- Modal para agregar direcci√≥n -->
      <div id="address-modal" class="modal" style="display: none;">
        <div class="modal-content">
          <span class="close">&times;</span>
          <h2>Agregar Direcci√≥n</h2>
          <form id="add-address-form">
            <div class="input-group">
              <label for="nombre_direccion">Nombre:</label>
              <input type="text" id="nombre_direccion" placeholder="Ej. Casa, Oficina" required />
            </div>
      
            <div class="input-group">
              <label for="calle">Calle:</label>
              <input type="text" id="calle" placeholder="Ej. Av. Siempre Viva 123" required />
            </div>
      
            <div class="input-group">
              <label for="colonia">Colonia:</label>
              <input type="text" id="colonia" placeholder="Ej. Centro" required />
            </div>
      
            <!-- ‚úÖ Selector de Ciudad -->
            <div class="input-group">
              <label for="ciudad">Ciudad:</label>
              <select id="ciudad" required>
                <option value="">Selecciona una ciudad</option>
                <option value="Playa del Carmen">Playa del Carmen - $500</option>
                <option value="Puerto Morelos">Puerto Morelos - $900</option>
                <option value="Puerto Aventuras">Puerto Aventuras - $900</option>
                <option value="Canc√∫n">Canc√∫n - $1250</option>
                <option value="Tulum">Tulum - $1250</option>
              </select>
            </div>
            
      
            <!-- ‚úÖ Costo de env√≠o din√°mico -->
            <div class="input-group">
              <label>Costo de env√≠o:</label>
              <p id="costo-envio">Selecciona una ciudad</p>
            </div>
      
            <!-- ‚úÖ Estado predefinido (no editable) -->
            <div class="input-group">
              <label for="estado">Estado:</label>
              <input type="text" id="estado" value="Quintana Roo" readonly />
            </div>
      
            <div class="input-group">
              <label for="cp">C√≥digo Postal:</label>
              <input type="text" id="cp" placeholder="Ej. 70000" required />
            </div>
      
            <button type="submit" class="save-button">Guardar Direcci√≥n</button>
          </form>
        </div>
      </div>
      
      <script>
        function actualizarFlete() {
          const ciudadSelect = document.getElementById("ciudad");
          const costoEnvio = document.getElementById("costo-envio");
      
          // Obtener el flete desde el atributo "data-flete"
          const flete = ciudadSelect.options[ciudadSelect.selectedIndex].getAttribute("data-flete");
      
          if (flete) {
            costoEnvio.textContent = `Costo de env√≠o: $${flete} MXN`;
          } else {
            costoEnvio.textContent = "Selecciona una ciudad";
          }
        }
      </script>
      
    </div>
  </div>

  <div id="footer" ></div>
  <div class="img"></div>

  <script>

    document.addEventListener("DOMContentLoaded", function () {
      const logoutButton = document.querySelector(".logout");
  
      if (logoutButton) {
          logoutButton.addEventListener("click", function () {
              console.log("üîí Cerrando sesi√≥n...");
              window.location.href = "/logout";
          });
      }
  });





    // Manejo del modal para abrir y cerrar
    document.getElementById("open-add-address").addEventListener("click", function () {
      document.getElementById("address-modal").style.display = "flex";
    });

    document.querySelector(".close").addEventListener("click", function () {
      document.getElementById("address-modal").style.display = "none";
    });

    window.addEventListener("click", function (event) {
      if (event.target === document.getElementById("address-modal")) {
        document.getElementById("address-modal").style.display = "none";
      }
    });

   
      // Cargar direcciones din√°micamente con formato optimizado
      document.addEventListener("DOMContentLoaded", function () {
        fetch("/api/direcciones")
          .then(response => response.json())
          .then(data => {
            const addressList = document.getElementById("address-list");
            addressList.innerHTML = ""; // Limpiar la lista antes de volver a cargar
    
            // Si no hay direcciones, mostramos un mensaje
            if (data.length === 0) {
              addressList.innerHTML = "<p>No tienes direcciones guardadas.</p>";
              return;
            }
    
            // Crear la estructura de cada direcci√≥n
            data.forEach(direccion => {
              const div = document.createElement("div");
              div.classList.add("address-item");
    
              div.innerHTML = `
                <div class="address-header">
                  <p><b>${direccion.nombre_direccion}</b></p>
                </div>
                <div class="address-body">
                  <p>${direccion.calle}, ${direccion.colonia}, ${direccion.ciudad}, ${direccion.estado}, ${direccion.cp}</p>
                </div>
                 <button class="delete-address" data-id="${direccion.direccion_id}">Eliminar</button>
              `;
    
              addressList.appendChild(div);
            });
          })
          .catch(error => console.error("Error al cargar direcciones:", error));
      });
   
    

    
      // Manejo del formulario de agregar direcci√≥n
      document.getElementById("add-address-form").addEventListener("submit", function (event) {
        event.preventDefault();
      
        // Obtener la ciudad seleccionada y asignar el flete correspondiente
        const ciudadSeleccionada = document.getElementById("ciudad").value;
        const tarifasEnvio = {
          "Playa del Carmen": 500,
          "Puerto Morelos": 900,
          "Puerto Aventuras": 900,
          "Canc√∫n": 1250,
          "Tulum": 1250
        };
      
        const flete = tarifasEnvio[ciudadSeleccionada] || 0;
      
        const formData = {
          nombre_direccion: document.getElementById("nombre_direccion").value,
          calle: document.getElementById("calle").value,
          colonia: document.getElementById("colonia").value,
          ciudad: ciudadSeleccionada,
          estado: document.getElementById("estado").value,
          cp: document.getElementById("cp").value,
          flete: flete // ‚úÖ Ahora enviamos el flete
        };
      
        fetch("/api/direcciones", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(formData),
        })
        .then(() => {
          document.getElementById("address-modal").style.display = "none";
          cargarDirecciones();
        })
        .catch(error => console.error("Error al agregar direcci√≥n:", error));
      });
      
    
      function cargarDirecciones() {
        fetch("/api/direcciones")
          .then(response => response.json())
          .then(data => {
            const addressList = document.getElementById("address-list");
            addressList.innerHTML = ""; // Limpiar la lista antes de volver a cargar
    
            data.forEach(direccion => {
              const li = document.createElement("li");
              li.classList.add("address-item");
              li.innerHTML = `
                <p><b>${direccion.nombre_direccion}</b></p>
                <p>${direccion.calle}, ${direccion.colonia}, ${direccion.ciudad}, ${direccion.estado}, ${direccion.cp}</p>
                <button class="delete-address" data-id="${direccion.direccion_id}">Eliminar</button>
              `;
              addressList.appendChild(li);
            });
          })
          .catch(error => console.error("Error al cargar direcciones:", error));
      }

    
    
    
  </script>

  <script>

    
        // Eliminar direcciones sin confirmar ni recargar la p√°gina
    document.addEventListener("click", function (event) {
      if (event.target.classList.contains("delete-address")) {
        const direccionId = event.target.getAttribute("data-id");
  
        fetch(`/api/direcciones/${direccionId}`, { method: "DELETE" })
          .then(response => {
            if (response.ok) {
              // Eliminar la direcci√≥n visualmente sin recargar la p√°gina
              const direccionElemento = event.target.closest(".address-item");
              if (direccionElemento) {
                direccionElemento.remove();
              }
            }
          })
          .catch(error => console.error("Error al eliminar la direcci√≥n:", error));
      }
    });
  
    function cargarDirecciones() {
      fetch("/api/direcciones")
        .then(response => response.json())
        .then(data => {
          const addressList = document.getElementById("address-list");
          addressList.innerHTML = ""; // Limpiar antes de recargar las direcciones
  
          if (data.length === 0) {
            addressList.innerHTML = "<p>No tienes direcciones guardadas.</p>";
            return;
          }
  
          data.forEach(direccion => {
            const div = document.createElement("div");
            div.classList.add("address-item");
            div.innerHTML = `
              <div class="address-header">
                <p><b>${direccion.nombre_direccion}</b></p>
              </div>
              <div class="address-body">
                <p>${direccion.calle}, ${direccion.colonia}, ${direccion.ciudad}, ${direccion.estado}, ${direccion.cp}</p>
              </div>
              <button class="delete-address" data-id="${direccion.direccion_id}">Eliminar</button>
            `;
            addressList.appendChild(div);
          });
        })
        .catch(error => console.error("Error al cargar direcciones:", error));
    }
  
    // Recargar direcciones despu√©s de eliminaci√≥n
    function actualizarDirecciones() {
      setTimeout(() => {
        cargarDirecciones();
      }, 500); // Espera medio segundo antes de recargar para evitar errores visuales
    }
  </script>
  
</body>
</html>

  <script>
    // barra y footer
    
    window.onload = () => loadTemplates('perfil');
    // guardar cambios en perfil

    document.getElementById("personal-info-form").addEventListener("submit", function (event) {
      event.preventDefault(); // Evita el comportamiento predeterminado de recargar la p√°gina
    
      const formData = {
        name: document.getElementById("name").value,
        phone: document.getElementById("phone").value,
      };
    
      // Enviar datos al servidor usando Fetch API
      fetch("/api/update-profile", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(formData),
      })
        .then((response) => {
          if (response.ok) {
            alert("Informaci√≥n actualizada correctamente");
          } else {
            alert("Hubo un error al actualizar la informaci√≥n");
          }
        })
        .catch((error) => console.error("Error al enviar los datos:", error));
    });
    


  </script>


  <script>
    function ajustarAlturaContainer() {
      const profileContainer = document.querySelector(".profile-container");
      const container = document.querySelector(".container");
  
      if (profileContainer && container) {
        const profileHeight = profileContainer.offsetHeight;
        container.style.minHeight = `${profileHeight + 300}px`;
      }
    }
  
    // Ajustar al cargar y al redimensionar la ventana
    window.addEventListener("load", ajustarAlturaContainer);
    window.addEventListener("resize", ajustarAlturaContainer);
  </script>
  
</body>
</html>
