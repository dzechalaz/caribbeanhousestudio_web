<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="initial-scale=1, width=device-width" />

    <link rel="stylesheet" href="./global.css" />
    <link rel="stylesheet" href="./index.css" />
    <script src="/global.js" defer></script>

    <link rel="stylesheet" href="/Templates/footer.css" />

    <script src="https://unpkg.com/lightweight-charts/dist/lightweight-charts.standalone.production.js"></script>
    
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Josefin Sans:wght@400;600;700&display=swap"
    />
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,300;0,400;0,500;0,700;1,600&display=swap"
    />
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Literata:wght@400&display=swap"
    />
  </head>

  <header>
    <div id="barra"></div>
    
    
  </header>
  <body>
    
    
      
      <div class="home1">
        <div class="portada"></div>
        <div class="textos"></div>
        <div class="containerLable">
      
        </div>



        <div id="main-content">


        <div class="featured-items">
          <div class="featured-items-title">DESTACADOS</div>
          <div class="featured-content">
            <div class="product-grid2">
              <div class="destacados-grid">
                <% destacados.forEach(function(producto) { %>
                  <div class="product-card" 
                      data-id="<%= producto.producto_id %>" 
                      data-color="<%= producto.color %>">
                    <img src="<%= producto.imagePath %>" alt="<%= producto.nombre %>" class="product-image">
                    <div class="product-details">
                      <h3 class="product-title"><%= producto.nombre %></h3>
                      <% function formatPrice(price) { 
                        return new Intl.NumberFormat("es-MX", { minimumFractionDigits: 2 }).format(price);
                      } %>
                      <p class="product-price">$<%= formatPrice(producto.precio) %></p>
                    </div>
                  </div>
                <% }); %>
              </div>
            </div>
            <!-- Contenedor de la gr√°fica -->
            <div class="chart-container">
              <h3>Historial de Precios</h3>
              <div id="price-chart-container"></div>
              <!-- Bot√≥n para redirigir al producto -->
              <div class="chart-button-container">
                <a id="producto-link" href="#" class="chart-button">Ver Producto</a>
              </div>
            </div>
          </div>
        </div>
                
                
        
        

          <div class="categorias">

            <div class="categorias1">CATEGORIAS</div>

            <div class="line-parent">
              <div class="categoria">
                <a href="./catalogo?categoria=Salas">
                  <img
                    class="categoria-icon salasIcon"
                    alt="Salas"
                    src="./public/sillonBig.png"
                  />
                  <span class="categoria-nombre">Salas</span>
                </a>
              </div>
              
              <div class="categoria">
                <a href="./catalogo?categoria=Rec√°mara">
                  <img
                    class="categoria-icon recamaraIcon"
                    alt="Recamaras"
                    src="./public/bed.png"
                  />
                  <span class="categoria-nombre">Rec√°mara</span>
                </a>
              </div>
              
              <div class="categoria">
                <a href="./catalogo?categoria=Almacenaje">
                  <img
                    class="categoria-icon almacenajeIcon"
                    alt="Almacenaje"
                    src="./public/closet.png"
                  />
                  <span class="categoria-nombre">Almacenaje</span>
                </a>
              </div>
              
              <div class="categoria">
                <a href="./catalogo?categoria=Sillas y bancos">
                  <img
                    class="categoria-icon sillasBancosIcon"
                    alt="Sillas y bancos"
                    src="./public/whiteSofa.png"
                  />
                  <span class="categoria-nombre">Sillas y bancos</span>
                </a>
              </div>
              
              <div class="categoria">
                <a href="./catalogo?categoria=Mesas">
                  <img
                    class="categoria-icon mesasIcon"
                    alt="Mesas"
                    src="./public/woodTable.png"
                  />
                  <span class="categoria-nombre">Mesas</span>
                </a>
              </div>
              
              <div class="categoria">
                <a href="./catalogo?categoria=Decoraci√≥n">
                  <img
                    class="categoria-icon decoracionIcon"
                    alt="Decoraci√≥n"
                    src="./public/lamp.png"
                  />
                  <span class="categoria-nombre">Decoraci√≥n</span>
                </a>
              </div>
            </div>
            
          </div>
          
          
          <div class="recent-items">
            <div class="recent-items1">AGREGADOS RECIENTEMENTE</div>
            
            <div class="product-grid">
              <div class="product-list">
                <% recientes.forEach(function(producto) { %>
                  <a href="/producto?id=<%= producto.producto_id %>" class="product-link">
                    <div class="product-card2">
                      <img src="<%= producto.imagePath %>" alt="<%= producto.nombre %>" class="product-image2">
                      <div class="product-details">
                        <h3 class="product-title"><%= producto.nombre %></h3>
                        <div class="product-price">
                          <p class="discounted-price">$<%= producto.precio %></p>
                        </div>
                      </div>
                    </div>
                  </a>
                <% }); %>
              </div>
            </div>
            
          </div>
          
              
        
          <div id="footer"></div>

        </div>

      </div>
    </div>



    <script>

      


      document.addEventListener("DOMContentLoaded", function () {
        const productos = document.querySelectorAll(".product-card2, .product-card");
    
        const observer = new IntersectionObserver(entries => {
            entries.forEach((entry, index) => {
                if (entry.isIntersecting) {
                    setTimeout(() => {
                        entry.target.style.opacity = 1;
                        entry.target.style.transform = "translateX(0)"; // Se mueve a su posici√≥n original
                    }, index * 200); // üî• Esto agrega un retraso para que salgan en secuencia
                }
            });
        }, { threshold: 0.3 }); // Se activa cuando el 30% del elemento es visible
    
        productos.forEach(producto => observer.observe(producto));
    });
    
    

      window.addEventListener("scroll", function () {
        let scrollY = window.scrollY;
      
      
        document.querySelector(".portada").style.transform = `translateY(${scrollY * -0.3}px)`;
        document.querySelector(".textos").style.transform = `translateY(${scrollY * -0.6}px)`;
      });
      


      async function cargarAnuncio() {
        try {
          const response = await fetch('/anuncio');
          const data = await response.json();
      
          if (data.success && data.url) {
            const anuncioDiv = document.createElement('div');
            anuncioDiv.style.position = 'fixed';
            anuncioDiv.style.top = '0';
            anuncioDiv.style.left = '0';
            anuncioDiv.style.width = '100vw';
            anuncioDiv.style.height = '100vh';
            anuncioDiv.style.background = 'rgba(0, 0, 0, 0.5)';
            anuncioDiv.style.display = 'flex';
            anuncioDiv.style.justifyContent = 'center';
            anuncioDiv.style.alignItems = 'center';
            anuncioDiv.style.zIndex = '1000';
      
            const img = document.createElement('img');
            img.src = data.url;
            img.style.maxWidth = '80%';
            img.style.maxHeight = '80%';
      
            anuncioDiv.appendChild(img);
            anuncioDiv.onclick = () => anuncioDiv.remove();
            document.body.appendChild(anuncioDiv);
          } else {
            console.log('Anuncio no habilitado o no disponible.');
          }
        } catch (error) {
          console.error('Error al cargar el anuncio:', error);
        }
      }
      
    
      // Llamar la funci√≥n al cargar la p√°gina
      cargarAnuncio();
      
      // ########################################### CARGAR DATOS EN GRAFCA


      let productNamesMap = new Map(); // Mapa para asociar producto_id con nombres

        // üî• Cargar los nombres de los productos desde el backend
        async function cargarNombresProductos() {
            try {
                const response = await fetch('/colaborador/productos/data'); // Ajusta esta ruta seg√∫n tu backend
                const data = await response.json();

                if (data.productos && data.productos.length > 0) {
                    data.productos.forEach(producto => {
                        productNamesMap.set(producto.producto_id, producto.nombre);
                    });
                 
                }
            } catch (error) {
                console.error("‚ùå Error al cargar nombres de productos:", error);
            }
        }

        // Llamar a la funci√≥n antes de actualizar la gr√°fica
        document.addEventListener('DOMContentLoaded', async () => {
          const productos = document.querySelectorAll('.product-card');
          const chartContainer = document.getElementById('price-chart-container');
          const productoLink = document.getElementById('producto-link');
      
          let chart = LightweightCharts.createChart(chartContainer, {
              width: chartContainer.offsetWidth,
              height: chartContainer.offsetHeight,
              layout: {
                  backgroundColor: 'rgba(0, 0, 0, 0)',
                  textColor: '#000',
                  fontSize: 20,
              },
              grid: {
                  vertLines: { color: '#eeeeee' },
                  horzLines: { color: '#eeeeee' },
              },
              priceScale: {
                  autoScale: true,
                  borderVisible: false,
                  position: 'none',
              },
              timeScale: {
                  borderColor: '#cccccc',
                  timeVisible: true,
              },
              crosshair: {
                  mode: LightweightCharts.CrosshairMode.Normal,
              },
          });
      
          let seriesMap = new Map(); // Mapa de series
          let productColors = new Map(); // Mapa de colores originales
          let originalDataMap = new Map(); // Mapa de datos sin normalizar
      
          // ‚úÖ Cargar nombres de productos desde el backend
          async function cargarNombresProductos() {
              try {
                  const response = await fetch('/colaborador/productos/data');
                  const data = await response.json();
      
                  if (data.productos && data.productos.length > 0) {
                      data.productos.forEach(producto => {
                          productNamesMap.set(producto.producto_id, producto.nombre);
                      });
                   
                  }
              } catch (error) {
                  console.error("‚ùå Error al cargar nombres de productos:", error);
              }
          }
      
          await cargarNombresProductos(); // Cargar nombres antes de las gr√°ficas
      
          // ‚úÖ Normalizar datos para que todas las gr√°ficas tengan la misma escala
          function normalizeData(data) {
              if (data.length === 0) return [];
      
              let min = Math.min(...data.map(d => d.value));
              let max = Math.max(...data.map(d => d.value));
      
              if (max === min) return data.map(d => ({ time: d.time, value: 0.5, realValue: d.value }));
      
              return data.map(d => ({
                  time: d.time,
                  value: (d.value - min) / (max - min),
                  realValue: d.value,
              }));
          }
      
          // ‚úÖ Cargar datos de una gr√°fica y almacenarla en el mapa de series
          const updateChart = async (productoId, color) => {
              try {
                  const response = await fetch(`/producto-historial/${productoId}`);
                  let chartData = await response.json();
      
                  if (!chartData || chartData.length === 0) {
                      console.warn(`No hay datos para el producto ${productoId}`);
                      return;
                  }
      
                  chartData = chartData.map(data => ({
                      time: data.time,
                      value: parseFloat(data.value),
                  }));
      
                  originalDataMap.set(productoId, chartData); // Guardamos los datos originales
                  let normalizedData = normalizeData(chartData); // Normalizamos los datos
      
                  if (!seriesMap.has(productoId)) {
                      let lineSeries = chart.addLineSeries({
                          lineWidth: 3,
                          priceScaleId: '',
                          color: color,
                      });
      
                      chart.applyOptions({
                          rightPriceScale: { visible: false },
                          leftPriceScale: { visible: false },
                      });
      
                      lineSeries.setData(normalizedData);
                      seriesMap.set(productoId, lineSeries);
                      productColors.set(productoId, color);
                  } else {
                      seriesMap.get(productoId).setData(normalizedData);
                  }
      
                  chart.timeScale().fitContent();
              } catch (err) {
                  console.error('Error al actualizar la gr√°fica:', err);
              }
          };
      
          // ‚úÖ Funci√≥n para resaltar una serie y bajar opacidad de las dem√°s
          function highlightSelectedSeries(selectedProductId) {
             
              seriesMap.forEach((series, productId) => {
                  let parsedProductId = parseInt(productId); // Convertir clave a n√∫mero
                 
                  if (parsedProductId === selectedProductId) {
                      
                      series.applyOptions({
                          lineWidth: 4,
                          color: productColors.get(parsedProductId), // Color normal
                      });
                  } else {
                      let originalColor = productColors.get(parsedProductId);
                      if (originalColor) {
                          let rgbaColor = hexToRGBA(originalColor, 0.4); // üî• Opacidad reducida al 20%
                          series.applyOptions({
                              lineWidth: 2,
                              color: rgbaColor,
                          });
                      }
                  }
              });
          }
      
          // ‚úÖ Convertir colores HEX a RGBA con transparencia
          function hexToRGBA(hex, alpha) {
              if (!hex || hex.length !== 7) return "rgba(0,0,0,1)";
              let r = parseInt(hex.substring(1, 3), 16);
              let g = parseInt(hex.substring(3, 5), 16);
              let b = parseInt(hex.substring(5, 7), 16);
              return `rgba(${r}, ${g}, ${b}, ${alpha})`;
          }
      
          // üî• Escuchar clic en los productos y resaltar la serie correspondiente
          
          productos.forEach(producto => {
            producto.addEventListener('click', () => {
                selectedProductId = parseInt(producto.getAttribute('data-id')); // üî• Guardar ID del producto seleccionado
                console.log("üìå Producto seleccionado:", selectedProductId);

                if (seriesMap.has(selectedProductId)) {
                    highlightSelectedSeries(selectedProductId);
                } else {
                    console.warn("‚ö†Ô∏è No se encontr√≥ una serie para el producto:", selectedProductId);
                }

                // üî• Actualizar el enlace del bot√≥n "Ver Producto"
                productoLink.href = `/producto?id=${selectedProductId}`;
                productoLink.style.opacity = 1; // Asegurar que el bot√≥n es visible
            });
        });
        
     
          // ‚úÖ Cargar todas las gr√°ficas al inicio
          productos.forEach(async (producto) => {
              const productoId = parseInt(producto.getAttribute('data-id'));
              const color = producto.getAttribute('data-color');
              await updateChart(productoId, color);
          });
          
          // **Crear Tooltip para mostrar el Nombre del Producto y Precio Real**
          const toolTip = document.createElement('div');
          toolTip.style.position = 'absolute';
          toolTip.style.background = '#bfdcd8';
          toolTip.style.padding = '6px 10px';
          toolTip.style.border = '1px solid #ccc';
          toolTip.style.borderRadius = '4px';
          toolTip.style.fontSize = '20px';
          toolTip.style.color = '#333';
          toolTip.style.display = 'none';
          toolTip.style.pointerEvents = 'none';
          toolTip.style.whiteSpace = 'nowrap';
          toolTip.style.zIndex = '5';
          chartContainer.appendChild(toolTip);
          
    // **Mostrar valor real y nombre en el tooltip**
          chart.subscribeCrosshairMove((param) => {
            if (!param || !param.time || param.seriesData.size === 0) {
                toolTip.style.display = 'none';
                return;
            }

            let text = '';
            let hasData = false;

            param.seriesData.forEach((data, series) => {
              // Buscar el producto_id basado en la serie
              const productoId = [...seriesMap.entries()].find(([id, s]) => s === series)?.[0];
          
              if (productoId && originalDataMap.has(productoId)) {
                  // Obtener el valor real del producto en la fecha seleccionada
                  const realData = originalDataMap.get(productoId).find(d => d.time === param.time);
          
                  // üî• Obtener el nombre del producto y limpiarlo
                  let productName = productNamesMap.get(parseInt(productoId)) || "Producto Desconocido";
          
                  // Limpiar el nombre para quitar "ALT" y la flecha "‚Ü≥"
                  productName = productName.replace(/‚Ü≥/g, '').replace(/ ALT\d+/g, '').trim();
          
                  if (realData) {
                      text += `<strong>${productName}:</strong> $${realData.value.toFixed(2)}<br>`;
                      hasData = true;
                  }
              }
          });
          

            if (!hasData) {
                toolTip.style.display = 'none';
                return;
            }

            toolTip.innerHTML = text;
            toolTip.style.left = `${param.point.x + 10}px`;
            toolTip.style.top = `${param.point.y - 30}px`;
            toolTip.style.display = 'block';

        });

        // **Ocultar el tooltip cuando se hace clic en la gr√°fica**
        chart.subscribeClick(() => {
            toolTip.style.display = 'none';
        });
        
      });
          
      
      
      
       


      //########################################################
    
    
        window.onload = function () {
      let claseAResaltar = "inicio";

      // Cargar barra.html din√°micamente
      fetch("/Templates/barra.html")
        .then((response) => response.text())
        .then((data) => {
          document.getElementById("barra").innerHTML = data;

          // Aplicar el estilo para el elemento resaltado
          let elementoAResaltar = document.querySelector(`.${claseAResaltar}`);
          if (elementoAResaltar) {
            elementoAResaltar.style.fontWeight = "bold";
            elementoAResaltar.style.color = "var(--color-lightseagreen)";
          }

          // Por defecto, el login-wrapper3 redirige a /login
          const loginWrapper = document.querySelector("#login-wrapper3");
          const loginText = document.querySelector(".login5"); // El texto dentro del bot√≥n

          // Aseg√∫rate de seleccionar cartContainer DESPU√âS de que se cargue la barra
          const cartContainer = document.getElementById("cart-container");

          if (loginWrapper) {
            loginWrapper.onclick = function () {
              window.location.href = "/login";
            }; // Redirige a /login por defecto
          }

          // Verificar la sesi√≥n para modificar el bot√≥n de login/logout si es necesario
          fetch("/api/session")
            .then((response) => response.json())
            .then((data) => {
              console.log("Sesi√≥n obtenida:", data);

              if (data.isAuthenticated) {
                // Cambiamos el color del contenedor (wrapper) a rojo chukum
                loginWrapper.setAttribute(
                  "style",
                  "background-color: #C19A6B; top: -10;"
                );

                // Cambiamos el texto a "Mi Perfil"
                loginText.textContent = "Mi Perfil";

                // Cambiamos la acci√≥n a ir al perfil
                loginWrapper.onclick = function () {
                  window.location.href = "/perfil";
                };

                // Hacer visible el cartContainer
                if (cartContainer) {
                  cartContainer.style.display = "flex"; // O 'block', seg√∫n el dise√±o
                } else {
                  console.warn("cart-container no encontrado en el DOM");
                }

                console.log("Sesi√≥n iniciada. Usuario:", data.correo);
              } else {
                console.log("No hay sesi√≥n iniciada.");
                // Ocultar el cartContainer si no est√° autenticado
                if (cartContainer) {
                  cartContainer.style.display = "none";
                }
              }
            })
            .catch((error) => console.error("Error al cargar la sesi√≥n:", error));
        })
        .catch((error) => console.error("Error al cargar la barra:", error));

      // Cargar el footer.html din√°micamente
      fetch("/Templates/footer.html")
        .then((response) => response.text())
        .then((data) => {
          document.getElementById("footer").innerHTML = data;
        })
        .catch((error) => console.error("Error al cargar el footer:", error));
    };







      
      function toggleMenu() {
        const menu = document.querySelector('.menu-container');
        menu.classList.toggle('active'); // Activa o desactiva el men√∫
      }

      function hideSidebar() {
        const menu = document.querySelector('.menu-container');
        menu.classList.remove('active'); // Oculta el men√∫
      }
     
    </script>
    
    
    
      
  </body>
  <script src="https://unpkg.com/lightweight-charts@4.0.0/dist/lightweight-charts.standalone.production.js"></script>
  <script src="/global.js" defer></script>
</html>
