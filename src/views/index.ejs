<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Josefin+Sans:wght@400;600;700&display=swap"
    />
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,300;0,400;0,500;0,600&display=swap"
    />
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Literata:wght@400&display=swap"
    />
  
    <!-- Hoja global de tu proyecto -->
    <link rel="stylesheet" href="/global.css" />
  
    <!-- Styles específicos de cada página -->
    <link rel="stylesheet" href="/index.css" />       <!-- para index.ejs -->
    <!-- o en catalogo.ejs -->
    <!-- <link rel="stylesheet" href="/catalogo.css" /> -->
  
    <!-- Barra y Footer (van antes de tu propio JS) -->
    <link rel="stylesheet" href="/barra.css" />
    <link rel="stylesheet" href="/footer.css" />
    <script src="/barra.js" defer></script> <!-- toggleMenu, hideSidebar -->
    <script src="/global.js" defer></script>
  
    <!-- Librerías de terceros -->
    <script
      src="https://unpkg.com/lightweight-charts/dist/lightweight-charts.standalone.production.js"
      
    ></script>
  

   
  </head>
  

  
    

  <body>
    <div id="barra"></div>

      <div class="home1"> 
        <div class="portada"></div>
        <div class="textos"></div>
        <div class="containerLable">
      
        </div>
        <div id="main-content">


        <div class="featured-items">
          <div class="featured-items-title">DESTACADOS</div>
          <div class="featured-content">
            <div class="product-grid2">
              <div class="destacados-grid">
                <% destacados.forEach(function(producto) { %>
                  <div class="product-card" 
                      data-id="<%= producto.producto_id %>" 
                      data-color="<%= producto.color %>">
                    <img src="<%= producto.imagePath %>" alt="<%= producto.nombre %>" class="product-image">
                    <div class="product-details">
                      <h3 class="product-title"><%= producto.nombre %></h3>
                      <% function formatPrice(price) { 
                        return new Intl.NumberFormat("es-MX", { minimumFractionDigits: 2 }).format(price);
                      } %>
                      <p class="product-price">$<%= formatPrice(producto.precio) %></p>
                    </div>
                  </div>
                <% }); %>
              </div>
            </div>
            <!-- Contenedor de la gráfica -->
            <div class="chart-container">
              <h3>Historial de Precios</h3>
              <div id="price-chart-container"></div>
              <!-- Botón para redirigir al producto -->
              <div class="chart-button-container">
                <a id="producto-link" href="#" class="chart-button">Ver Producto</a>
              </div>
            </div>
          </div>
        </div>

          <div class="categorias">

            <div class="categorias1">CATEGORIAS</div>

            <div class="line-parent">
              <div class="categoria">
                <a href="./catalogo?categoria=Salas">
                  <img
                    class="categoria-icon salasIcon"
                    alt="Salas"
                    src="./public/sillonBig.png"
                  />
                  <span class="categoria-nombre">Salas</span>
                </a>
              </div>
              
              <div class="categoria">
                <a href="./catalogo?categoria=Recámara">
                  <img
                    class="categoria-icon recamaraIcon"
                    alt="Recamaras"
                    src="./public/bed.png"
                  />
                  <span class="categoria-nombre">Recámara</span>
                </a>
              </div>
              
              <div class="categoria">
                <a href="./catalogo?categoria=Almacenaje">
                  <img
                    class="categoria-icon almacenajeIcon"
                    alt="Almacenaje"
                    src="./public/closet.png"
                  />
                  <span class="categoria-nombre">Almacenaje</span>
                </a>
              </div>
              
              <div class="categoria">
                <a href="./catalogo?categoria=Sillas y bancos">
                  <img
                    class="categoria-icon sillasBancosIcon"
                    alt="Sillas y bancos"
                    src="./public/whiteSofa.png"
                  />
                  <span class="categoria-nombre">Sillas y bancos</span>
                </a>
              </div>
              
              <div class="categoria">
                <a href="./catalogo?categoria=Mesas">
                  <img
                    class="categoria-icon mesasIcon"
                    alt="Mesas"
                    src="./public/woodTable.png"
                  />
                  <span class="categoria-nombre">Mesas</span>
                </a>
              </div>
              
              <div class="categoria">
                <a href="./catalogo?categoria=Decoración">
                  <img
                    class="categoria-icon decoracionIcon"
                    alt="Decoración"
                    src="./public/lamp.png"
                  />
                  <span class="categoria-nombre">Decoración</span>
                </a>
              </div>
            </div>
            
          </div>
          
          
          <div class="recent-items">
            <div class="recent-items1">AGREGADOS RECIENTEMENTE</div>
            
            <div class="product-grid">
              <div class="product-list">
                <% recientes.forEach(function(producto) { %>
                  <a href="/producto?id=<%= producto.producto_id %>" class="product-link">
                    <div class="product-card2">
                      <img src="<%= producto.imagePath %>" alt="<%= producto.nombre %>" class="product-image2">
                      <div class="product-details">
                        <h3 class="product-title"><%= producto.nombre %></h3>
                        <div class="product-price">
                          <p class="discounted-price">$<%= producto.precio %></p>
                        </div>
                      </div>
                    </div>
                  </a>
                <% }); %>
              </div>
            </div>
            
          </div>
          
              
        
          

        </div>
        <div id="footer"></div>
      </div>
      
       
      
    </div>

   

    <script>

      


      document.addEventListener("DOMContentLoaded", function () {
        const productos = document.querySelectorAll(".product-card2, .product-card");
    
        const observer = new IntersectionObserver(entries => {
            entries.forEach((entry, index) => {
                if (entry.isIntersecting) {
                    setTimeout(() => {
                        entry.target.style.opacity = 1;
                        entry.target.style.transform = "translateX(0)"; // Se mueve a su posición original
                    }, index * 200); // 🔥 Esto agrega un retraso para que salgan en secuencia
                }
            });
        }, { threshold: 0.3 }); // Se activa cuando el 30% del elemento es visible
    
        productos.forEach(producto => observer.observe(producto));
    });
    
    

      window.addEventListener("scroll", function () {
        let scrollY = window.scrollY;
      
      
        document.querySelector(".portada").style.transform = `translateY(${scrollY * -0.3}px)`;
        document.querySelector(".textos").style.transform = `translateY(${scrollY * -0.6}px)`;
      });
      


      async function cargarAnuncio() {
        try {
          const response = await fetch('/anuncio');
          const data = await response.json();
      
          if (data.success && data.url) {
            const anuncioDiv = document.createElement('div');
            anuncioDiv.style.position = 'fixed';
            anuncioDiv.style.top = '0';
            anuncioDiv.style.left = '0';
            anuncioDiv.style.width = '100vw';
            anuncioDiv.style.height = '100vh';
            anuncioDiv.style.background = 'rgba(0, 0, 0, 0.5)';
            anuncioDiv.style.display = 'flex';
            anuncioDiv.style.justifyContent = 'center';
            anuncioDiv.style.alignItems = 'center';
            anuncioDiv.style.zIndex = '1000';
      
            const img = document.createElement('img');
            img.src = data.url;
            img.style.maxWidth = '80%';
            img.style.maxHeight = '80%';
      
            anuncioDiv.appendChild(img);
            anuncioDiv.onclick = () => anuncioDiv.remove();
            document.body.appendChild(anuncioDiv);
          } else {
            console.log('Anuncio no habilitado o no disponible.');
          }
        } catch (error) {
          console.error('Error al cargar el anuncio:', error);
        }
      }
      
    
      // Llamar la función al cargar la página
      cargarAnuncio();
      
      // ########################################### CARGAR DATOS EN GRAFCA


      document.addEventListener('DOMContentLoaded', async () => {
        const productos = document.querySelectorAll('.product-card');
        const chartContainer = document.getElementById('price-chart-container');
        const productoLink = document.getElementById('producto-link');
      
        if (!chartContainer) {
          console.error("⚠️ Falta el contenedor de la gráfica (#price-chart-container).");
          return;
        }
      
        // Mapa para nombres de producto (usado en el tooltip)
        let productNamesMap = new Map();
      
        // 1) Cargar nombres de los productos
        async function cargarNombresProductos() {
          try {
            const response = await fetch('/colaborador/productos/data');
            const data = await response.json();
            if (data.productos && data.productos.length > 0) {
              data.productos.forEach(producto => {
                productNamesMap.set(producto.producto_id, producto.nombre);
              });
            }
          } catch (error) {
            console.error("❌ Error al cargar nombres de productos:", error);
          }
        }
      
        // Cargar nombres antes de usar la gráfica
        await cargarNombresProductos();
      
        // 2) Crear la gráfica con LightweightCharts
        let chart = LightweightCharts.createChart(chartContainer, {
          width: chartContainer.offsetWidth,
          height: chartContainer.offsetHeight,
          layout: {
            backgroundColor: 'rgba(0, 0, 0, 0)',
            textColor: '#000',
            fontSize: 20,
          },
          grid: {
            vertLines: { color: '#eeeeee' },
            horzLines: { color: '#eeeeee' },
          },
          priceScale: {
            autoScale: true,
            borderVisible: false,
            position: 'none',
          },
          timeScale: {
            borderColor: '#cccccc',
            timeVisible: true,
          },
          crosshair: {
            mode: LightweightCharts.CrosshairMode.Normal,
          },
        });
      
        // 2a) Generar la “línea fantasma” en y=0 para todo el año
        function generateZeroLineData() {
          let data = [];
          let now = new Date();
          for (let i = 0; i < 13; i++) {
            let d = new Date(now.getFullYear(), now.getMonth() - i, 1);
            let iso = d.toISOString().split('T')[0];
            data.push({ time: iso, value: 0 });
          }
          data.sort((a, b) => (a.time > b.time ? 1 : -1));
          return data;
        }
      
        // Crear la serie fantasma (invisible) para que el eje Y incluya 0
        let zeroLineSeries = chart.addLineSeries({
          lineWidth: 2,
          color: 'rgba(0, 0, 0, 0)', // invisible
        });
        zeroLineSeries.setData(generateZeroLineData());
      
        // Variables globales para la serie principal
        let currentSeries = null;       // La serie del producto activo
        let currentProductId = null;    // ID del producto activo
        let originalDataMap = new Map();// Para tooltip
      
        // 3) Obtener datos de un producto (sin normalizar)
        async function fetchProductData(productoId) {
          try {
            const response = await fetch(`/producto-historial/${productoId}`);
            const chartData = await response.json();
      
            if (!chartData || chartData.length === 0) {
              console.warn(`⚠️ No hay datos para el producto ${productoId}`);
              return [];
            }
      
            // Convertir la respuesta a { time, value } con valores reales
            return chartData.map(d => ({
              time: d.time,
              value: parseFloat(d.value),
              nombre: d.nombre || ''
            }));
          } catch (err) {
            console.error('❌ Error al obtener datos del producto:', err);
            return [];
          }
        }
      
        // 4) Función para MOSTRAR la gráfica de un producto con fade de 1s
        async function fadeToProduct(productoId, color) {
          // a) Iniciar fade-out (1s)
          chartContainer.style.transition = 'opacity 500ms';
          chartContainer.style.opacity = 0;
      
          // b) Esperar ~1s para notar el fade-out
          await new Promise(resolve => setTimeout(resolve, 500));
      
          // c) Eliminar la serie previa
          if (currentSeries) {
            chart.removeSeries(currentSeries);
            currentSeries = null;
            if (currentProductId) {
              originalDataMap.delete(currentProductId);
            }
          }
      
          // d) Obtener datos del nuevo producto
          let data = await fetchProductData(productoId);
          if (data.length === 0) {
            // Si no hay datos, resetear el fade
            chartContainer.style.opacity = 1;
            return;
          }
      
          // e) Crear la nueva serie
          currentSeries = chart.addLineSeries({
            lineWidth: 6,         // grosor de la línea
            color: color || '#FF0000',
          });
          currentSeries.setData(data);
      
          currentProductId = productoId;
          originalDataMap.set(productoId, data);
      
          // Ajustar la vista
          chart.timeScale().fitContent();
      
          // f) Fade-in
          chartContainer.style.opacity = 1;
        }
      
        // 5) Al hacer clic en un producto → se detiene la rotación y se muestra ese producto
        let autoRotate = true;  // bandera para saber si la rotación está activa
        let rotateInterval;     // para guardar el setInterval
      
        productos.forEach(producto => {
          producto.addEventListener('click', async () => {
            // Detener la rotación automática
            autoRotate = false;
            clearInterval(rotateInterval);
      
            let selectedProductId = parseInt(producto.getAttribute('data-id'));
            let color = producto.getAttribute('data-color') || '#FF0000';
 
      
            await fadeToProduct(selectedProductId, color);
      
            // Actualizar enlace "Ver Producto"
            if (productoLink) {
              productoLink.href = `/producto?id=${selectedProductId}`;
              productoLink.style.opacity = 1;
            }
          });
        });
      
        // 6) Rotación automática cada 7s si autoRotate es true
        let currentIndex = 0;
        function startAutoSwitch() {
          rotateInterval = setInterval(async () => {
            if (!autoRotate) return; // Si se desactiva la rotación, no hacer nada
      
            let product = productos[currentIndex];
            let productoId = parseInt(product.getAttribute('data-id'));
            let color = product.getAttribute('data-color') || '#FF0000';
      
          
            await fadeToProduct(productoId, color);
      
            // Actualizar enlace "Ver Producto"
            if (productoLink) {
              productoLink.href = `/producto?id=${productoId}`;
              productoLink.style.opacity = 1;
            }
      
            // Modo circular
            currentIndex = (currentIndex + 1) % productos.length;
          }, 3000); // cada 7 segundos
        }
      
        // 7) Mostrar el PRIMER producto inmediatamente (sin esperar)
        if (productos.length > 0) {
          const firstId = parseInt(productos[0].getAttribute('data-id'));
          const firstColor = productos[0].getAttribute('data-color') || '#FF0000';
      
          // Mostrar el primer producto
          await fadeToProduct(firstId, firstColor);
      
          // Ajustar currentIndex a 1 para que en la primera transición salte al segundo producto
          currentIndex = 1;
      
          // Iniciar rotación (solo si hay más de 1 producto)
          if (productos.length > 1) {
            startAutoSwitch();
          }
        }
      
        // 8) Tooltip para mostrar nombre y precio real
        const toolTip = document.createElement('div');
        toolTip.style.position = 'absolute';
        toolTip.style.background = '#bfdcd8';
        toolTip.style.padding = '6px 10px';
        toolTip.style.border = '1px solid #ccc';
        toolTip.style.borderRadius = '4px';
        toolTip.style.fontSize = '20px';
        toolTip.style.color = '#333';
        toolTip.style.display = 'none';
        toolTip.style.pointerEvents = 'none';
        toolTip.style.whiteSpace = 'nowrap';
        toolTip.style.zIndex = '5';
        chartContainer.appendChild(toolTip);
      
        chart.subscribeCrosshairMove((param) => {
          if (!param || !param.time || param.seriesData.size === 0) {
            toolTip.style.display = 'none';
            return;
          }
      
          let text = '';
          let hasData = false;
      
          param.seriesData.forEach((data, series) => {
            if (series === currentSeries && originalDataMap.has(currentProductId)) {
              const realData = originalDataMap
                .get(currentProductId)
                .find(d => d.time === param.time);
      
              if (realData) {
                let productName = productNamesMap.get(currentProductId) 
                               || realData.nombre 
                               || "Producto Desconocido";
      
                // Limpiar “ALT” y flecha ↳ (opcional)
                productName = productName
                  .replace(/↳/g, '')
                  .replace(/ ALT\\d+/g, '')
                  .trim();
      
                text += `<strong>${productName}:</strong> $${realData.value.toFixed(2)}<br>`;
                hasData = true;
              }
            }
          });
      
          if (!hasData) {
            toolTip.style.display = 'none';
            return;
          }
      
          toolTip.innerHTML = text;
          toolTip.style.left = `${param.point.x + 10}px`;
          toolTip.style.top = `${param.point.y - 30}px`;
          toolTip.style.display = 'block';
        });
      
        // Ocultar tooltip al hacer clic
        chart.subscribeClick(() => {
          toolTip.style.display = 'none';
        });
      });
      
       


      //########################################################

      window.onload = () => loadTemplates('inicio');
    
    </script>
    
    
    
      
  </body>
  <script src="https://unpkg.com/lightweight-charts@4.0.0/dist/lightweight-charts.standalone.production.js"></script>

</html>
